name: Push

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  TF_LOG: INFO

permissions:
  id-token: write
  contents: read

jobs: 
  deploy-infra:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Log into Azure with OIDC integration  
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.DCD_CFT_SANDBOX_SUBSCRIPTION }}

    - name: Install jq
      run: |
        sudo apt-get install jq -y
  
    # List all the repos and branches that the rules are going to be applied on
    - name: List Repositories and Branches
      run: |
        echo "Checking Repositories and Branches"
        cat ./production-repos.json
        for repo in $(jq -r '.[]' ./production-repos.json); do
          echo "Checking repository: $repo"
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/hmcts/$repo
  
          for branch in main master; do
            echo "Checking branch: $branch in repository: $repo"
            curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/hmcts-test/$repo/branches/$branch
          done
        done

    - name: Terraform Init
      working-directory: components
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.DCD_CFT_SANDBOX_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -reconfigure

    - name: Terraform Plan
      working-directory: components
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.DCD_CFT_SANDBOX_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: terraform plan -var="github_token=${{ secrets.PAT_TOKEN }}"

    - name: Terraform Apply
      working-directory: components
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.DCD_CFT_SANDBOX_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: terraform apply -var="github_token=${{ secrets.PAT_TOKEN }}" -auto-approve
